<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SRM on Spielsand</title>
    <link>https://chiyosbigdragon.github.io/tags/srm/</link>
    <description>Recent content in SRM on Spielsand</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    <lastBuildDate>Fri, 22 Mar 2019 14:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://chiyosbigdragon.github.io/tags/srm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SRM753 Div1Easy MaxCutFree</title>
      <link>https://chiyosbigdragon.github.io/blog/2019/03/22/</link>
      <pubDate>Fri, 22 Mar 2019 14:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2019/03/22/</guid>
      <description>URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=15257
概略 単純無向グラフ $G$ が与えられる．$G$ の橋を含まないような誘導部分グラフのうち，頂点数が最大となるものを求める．
方針 要は，$G$ から橋だけを残したグラフについての最大独立集合問題である．このグラフは明らかに森であるから，木DPが使える．
参考  制約が甘いので橋の検出にはUnionFindを使う．各辺ごとにそれを除いたグラフを構築し，端点の連結性を判定する．
 反省 本番では橋の検出までしかできなかった．最大独立集合問題であることにはなんとなく気付いていたが，名前だけが先走った．「NP困難じゃん…」
dp等の初期化も忘れずに．</description>
    </item>
    
    <item>
      <title>SRM512 Div1Easy MysteriousRestaurant</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/09/11/</link>
      <pubDate>Tue, 11 Sep 2018 09:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/09/11/</guid>
      <description> URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11295
概略 $N$ 日間だけ開くレストランがある．メニューは $M$ 種類あり，その値段は日ごと，メニューごとに異なる．
また，注文するメニューは $7$ 日前と同じでなくてはならない．
1日1回注文をするとして，財布の限り粘るとすると何日間粘ることが出来るか．
方針 サンプル1を見ると，1日だけいる場合と8日いる場合とでは，取る料理の種類が異なることがわかる．なので日を進めるたび，曜日( $7n$ 日前)の料理をおさらいして最小コストを再計算してやるとよい．
7日目まではソートして一番左にくるやつを選ぶ．以降は曜日でかかったコストをいったんbudgetに戻してから再計算．この方法だと貪欲にやってる感が強いので見通しはいい．
 </description>
    </item>
    
    <item>
      <title>SRM511 Div1Easy Zoo</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/09/05/</link>
      <pubDate>Wed, 05 Sep 2018 09:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/09/05/</guid>
      <description> これ本家のカテゴリが Recursion なんですけど，どうなんですかね．
URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11485
概略 ウサギとネコが合わせて $N$ 匹いる．彼らの身長は互いに異なる．
1匹ずつに次の質問をする． 「あなたと同じ種類で，あなたよりも身長が高い動物は何匹いるか？」
彼らの回答が全て正しいものとするとき，それを構成するウサギまたはネコの割り当ては何通りあるか．
補足 {0,0,1,1,2}という回答が得られたとき，ウサギをR，ネコをCとすると，
 {R,C,R,C,R} {R,C,R,C,C} {R,C,C,R,R} {R,C,C,R,C} {C,R,R,C,R} {C,R,R,C,C} {C,R,C,R,R} {C,R,C,R,C}  の8通りが考えられます．
方針 $2^{40}$ をシミュレートすることはまず無理．
とりあえずanswersをソートしてみる．ウサちゃんもネコちゃんも同じ身長の同種はいないとのことなので，構築可能であるとき，
answers={0,0,1,1,2,2,…,n-1,n-1,n,n+1,n+2,…,m}
になる．逆にこうでないものは全て弾く必要があってこれが結構面倒．実装ではmapで数えてuniqueを取っている．
各数字へのウサギとネコの割り振り方は，
$$ 2(多いほうがウサギかネコの2通り) \times 2^{n} = 2^{n+1} $$
 </description>
    </item>
    
    <item>
      <title>SRM510 Div2Medium TheLuckyGameDivTwo</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/09/04/</link>
      <pubDate>Tue, 04 Sep 2018 19:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/09/04/</guid>
      <description> URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11464
概略 Lucky numberは $4,7$ のみを含む数字である．
JohnとBrusはゲームをする．先ずJohnが長さjLenの区間を選ぶ．そのあとBrusが長さbLenの区間を「Johnが選んだ区間」の中から選ぶ．Brusが選んだ区間に含まれるLucky numberの数がポイントになる．
Johnがスコアを最大化するように，Brusがスコアを最小化するように戦術をとるとき，最終的なスコアはいくらになるか．
方針 範囲が $[1,4747]$ と狭いので全探索できそう．
Johnはスコアが大きくなるように，Brusはスコアが小さくなるように，それぞれ区間をとるというのがわかりにくい．こういう戦略最適化問題の場合，おおむね先手はエスパーなので，まずBrusの行動から考える．
BrusはJohnの決めた区間のうち，スコアが小さくなるよう更に区間を定める．つまり，Johnの各選択に対してスコアは一意に確定することがわかる．こうなると後は単純で，Johnはこの内スコアが最も大きくなる選択をすればいい．数学でやる1文字固定に近い．
どうせラッキーナンバーは少ないので，2進数を列挙する感覚で全部書き出した．春に受講した，ひたすらカルノー図を書く授業を思い出してちょっと鬱になった．
Brusが全範囲の最小値を必死に探す中，Johnはそのうちの最大値を高みの見物で選ぶ．そんな主従関係が目に浮かぶと書きやすいですね．
 </description>
    </item>
    
    <item>
      <title>SRM508 Div1Easy DivideAndShift</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/08/22/</link>
      <pubDate>Wed, 22 Aug 2018 16:30:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/08/22/</guid>
      <description> URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11434
概略 $1 \sim N$ のスロットが1列に並んでいる．プレイヤーは常にスロット $1$ の中身しか取得することができない．ゲームの目的は，開始時にスロット $M$ にあった中身を取得することである．
スロットには2通りの操作を行うことが出来る．
 Divide  $N$ を割り切れる素数 $p$ を選びスロットを $[1,\frac{N}{p}],[\frac{N}{p}+1,\frac{2N}{p}],…$ に分割する．この内，目的のスロットを含む部分列のみを保持する．その後，$N←\frac{N}{p}$とし，スロットの番号を $1 \sim \frac{N}{p}$ に振り直す．  Shift  スロットを左/右にシフトする．シフトするとスロット番号が $-1/+1$ だけ変化する．スロット $0$ は $N$ に，$N+1$ は $1$ に別途移動する．   最低で何回操作をすれば目的を達成できるか．
方針 全然できなかった．調べたら「DivideとShiftの操作は可換」ということがわかって（証明は知らない）そこからはノーヒントで行けた．これで250ptなんだ…
Shiftは数えるだけなので先にDivideを行う．Divideのやり方は高々、2^(素因数の数)だから全列挙してやればいい．あとは各々についてShiftの回数を求める．
のんきに数えてたらTLEしたので，剰余で考える必要があるのだが，これが難しかった．右にShiftする場合の式がよくわからなくて，手元のサンプルと帳尻を合わせるように書いたら通った（最悪）
 </description>
    </item>
    
    <item>
      <title>SRM504.5 Div1Easy TheNumbersWithLuckyLastDigit</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/08/21/</link>
      <pubDate>Tue, 21 Aug 2018 20:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/08/21/</guid>
      <description> URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11096
概略 $n$ が与えられる．$n$ を下1桁が $4$ または $7$ である正の数の和として表すとき，必要な項数の最小はいくつであるか．構成不可能であれば -1 を返す．
方針 $4+10k,7+10k$ を使うことが出来るので，$n$ が項数 $x$ で構成可能であるとき，$n+10k$ も項数 $x$ で構成可能．したがって $n$ の下1桁に注目してやればいい．
例えば下1桁が $3$ になるような項数最小の構成法は $$ 23 = 4 \times 4 + 7 \times 1 $$ である．これを下1桁 $0 \sim 9$ についてやればよく，結果下図が完成した．
   4と7で表せる数の下一桁   最小値未満の数は表せない 
 </description>
    </item>
    
    <item>
      <title>SRM506 Div1Easy SlimeXSlimesCity</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/08/16/</link>
      <pubDate>Thu, 16 Aug 2018 03:30:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/08/16/</guid>
      <description> URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11154
概略 $N$ 個の街があり各々には名前がついている．2つの街の合併を繰り返し，最終的に1つにすることを考える．
合併前の街の人口を $i,j (i \leq j)$ とする．
 $i &amp;lt; j$ のとき  合併後の街の名前は $j$ を継承する．  $i = j$ のとき  合併後の街の名前は $i$ または $j$ を継承する．   最終的に街が1つになったとき，その名前として取り得るものは何通りか．
方針 B - Colorful Creatures &amp;mdash; AtCoder Grand Contest 011
サンプル5の解釈を説明する．
ソートして人口の昇順に並べても一般性は失われない．また赤は累積和である．
合併のルールから，自分より人口の少ない街は無条件に取り込めるので全て取り込むことにする．これで増えた人口でも1つ右の街が取り込めなければ，その街が生き残ることはない．最終目標は全ての街を合併することなので，右から赤と黒を判定をしていき，図の点線のように断層ができるまでの数が答え．
 </description>
    </item>
    
    <item>
      <title>SRM505 Div2Medium PerfectSequences</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/08/14/</link>
      <pubDate>Tue, 14 Aug 2018 14:30:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/08/14/</guid>
      <description>URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11397
概略 perfect sequence とは以下の条件をともに満たす数列である．
 全要素が非負整数 全要素の積と和が等しい  seq の要素をひとつだけ変更して perfect sequence が作れるかを判定する．
方針 $$ S_i = \frac {\sum_k{seq[k]}} {seq[i]} $$ $$ P_i = \frac {\prod_k{seq[k]}} {seq[i]} $$ とすれば，perfect sequenceが作れる時 $$ S_i + x = T_i \times x ⇔ S_i = (T_i - 1) \times x $$ をみたす $x$ が1つ以上の $i$ で存在する．
ただし以下の点に注意．
 変更しないのはダメ． seq のサイズが1なら必ず Yes $T_i - 1 = 0$ のとき0除算で危ない．この場合， $S_i = 0$ であればよい。  最悪のケースだと $T_i \approx 10 ^ {9 \times 50}$になってオーバーフローするからこのコードはダメなはず…だけど，普通に通る．</description>
    </item>
    
    <item>
      <title>SRM505 Div1Easy RectangleArea</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/08/10/</link>
      <pubDate>Fri, 10 Aug 2018 22:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/08/10/</guid>
      <description>URL http://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11400
概略 小長方形を組み合わせた長方形の盤面が与えられる．小長方形の各々について，面積がわかっていればY，そうでなければNと表記される．質問をするたび，任意のNが1つYに変化する．最低で何回質問をすれば盤面全てをYに変えられるか．
方針 図の赤枠のように長方形をとる．このとき，頂点と接する4つの小長方形に着目する．
図より，このうち3つの面積がわかっている(Y)ならば，残り1つの面積もわかる．このような作業を繰り返すといずれ盤面のYが増えなくなるため，小長方形の面積を質問する必要がある．
質問する小長方形はどれでもよさそうだが確証はない．
追記1: ケースが大きいとTLEするらしい．再帰部分が明らかに怪しいがいまいちわからない．改善中…
追記2: creepさんなどの記事を参考にして通しました．TLE解では再帰時に頂点を全探索していたので $O(W^2H^2)$ だったが，実際にはN→Yとしたところに関係する場所しか変わらないので，$O(WH)$ に減らせるはず．結果として全体では $O(W^3H^3)$ → $O(W^2H^2)$ に削減．
 改善後  改善前 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; class RectangleArea { public: int h,w; int board[51][51]; int ret=-1; void greed(){ for(int y=0;y&amp;lt;h-1;y++){ for(int x=0;x&amp;lt;w-1;x++){ for(int dy=y;dy&amp;lt;h;dy++){ for(int dx=x;dx&amp;lt;w;dx++){ if(board[y][x]+board[y][dx]+board[dy][x]+board[dy][dx]==3){ board[y][x]=board[y][dx]=board[dy][x]=board[dy][dx]=1; greed(); } } } } } } int minimumQueries( vector &amp;lt;string&amp;gt; known ){ h=known.size(); w=known[0].size(); for(int y=0;y&amp;lt;h;y++){ for(int x=0;x&amp;lt;w;x++){ if(known[y][x]==&#39;Y&#39;) board[y][x]=1; else board[y][x]=0; } } while(1){ ret++; greed(); bool end=true; for(int y=0;y&amp;lt;h;y++){ for(int x=0;x&amp;lt;w;x++){ if(board[y][x]==0){ board[y][x]=1; end=false; break; } } if(!</description>
    </item>
    
    <item>
      <title>SRM504 Div1Easy MathContest</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/08/04/</link>
      <pubDate>Sat, 04 Aug 2018 12:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/08/04/</guid>
      <description>URL http://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11233
概略 ボールが1列に並んでおり，先頭から順に取り出す．取り出したボールの色によって，列に以下の操作がなされる．
 white  列を反転させる  black  色を反転させる   操作終了までに取り出したblackの数を求める．
方針 愚直に再現すればよさそう．でも色反転の操作がダルそうだったので，状態を別で保持しxorを使うことで省略．初めは以下のコードをsubmitしたが，システスでTLE．よく考えれば $O(N^2)$ なので当然．
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; class MathContest { public: int countBlack( string ballSequence, int repetitions ) { int n=ballSequence.size(); vector&amp;lt;bool&amp;gt; balls; for(int i=0;i&amp;lt;repetitions;i++){ for(int j=0;j&amp;lt;n;j++){ if(ballSequence[j]==&#39;B&#39;) balls.push_back(1); else balls.push_back(0); } } int black=0; bool rev=1; while(balls.size()){ bool color=balls.front(); balls.erase(balls.begin()); if(color^rev){ reverse(balls.begin(),balls.end()); }else{ rev=!rev; black++; } } return black; } };   一番上を取り出すときのerase スタック反転時のreverse  この二つが $O(N)$ なので省略する必要があったが，ここで異常に悩む．eraseの代替をpop_backで考えていたため，reverseと両立できなかったのが原因．結局，reverseは色反転と同じようにフラグ管理で，eraseはindexを操作することで解決．</description>
    </item>
    
    <item>
      <title>SRM503 Div1Easy ToastXToast</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/07/31/</link>
      <pubDate>Tue, 31 Jul 2018 16:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/07/31/</guid>
      <description> URL http://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11204
概略 $N$ 種のパンについての情報underとoverが与えられる．各種のパンには $X_i$ が定められており，これより小さいパンはunder，大きいパンはoverである．$\min N$ はいくらであるか．条件を満たすパンが存在しない場合-1を返す．
方針 最初サンプル3の意味がわからなくて焦った.
1列に並べた時に
 左端にover || 右端にunder  そんなパンはないので，-1  underとoverが完全に分かれている  Xがその間に置けて，1  その他  下図より，2（のはず）    </description>
    </item>
    
    <item>
      <title>SRM502 Div1Easy TheLotteryBothDivs</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/07/27/</link>
      <pubDate>Fri, 27 Jul 2018 21:30:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/07/27/</guid>
      <description>URL http://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11359
概略 &amp;quot;000000000&amp;quot;～&amp;quot;999999999&amp;quot;のうち，goodSuffixesを含むものを当たりとするときの当選確率を求める．
方針 単純に数えると重複が生じることに気を付ける．集合を意識すると良い．
 goodSuffixes={&amp;quot;47&amp;quot;,&amp;quot;4747&amp;quot;}とすると，&amp;quot;4747&amp;quot;$\subset$&amp;quot;47&amp;quot;なので&amp;quot;4747&amp;quot;を数える必要はない．  そこでgoodSuffixesを桁数の小さい順に並べて，集合の大きい方のみを数えるようにする．
追記: 昔のコード酷すぎるな．whileのくだりはusedかなんかで管理したほうが絶対良い．
 テストおわったのでしっかり精進します</description>
    </item>
    
    <item>
      <title>SRM501 Div1Easy FoxPlayingGame</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/07/26/</link>
      <pubDate>Thu, 26 Jul 2018 17:30:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/07/26/</guid>
      <description>URL http://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11284
概略 初期スコアを0として2種類の行動を任意の順番で行う．
 A: scoreAを足す． B: scoreBを掛ける  Aを $nA$ 回，Bを $nB$ 回行うときのスコアの最大値を求める．
方針 1年生 (A First Grader) &amp;mdash; Aizu Online Judge を解いた経験からDP解を思いつくも，うまくいかない．しぶしぶ考察すると，「足してから掛けたい」「正負は融通が利くので絶対値を大きくしたい」など思いついたため，全部入れ込んだ．場合分けはコードを参照．
 追記：他人の解法が鮮やかすぎて直視できない</description>
    </item>
    
    <item>
      <title>SRM500 Div1Easy MafiaGame</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/07/19/</link>
      <pubDate>Thu, 19 Jul 2018 12:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/07/19/</guid>
      <description> URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11342
概略 このゲーム，言語化が難しい．
 $N$ 人には0-indexedで番号が振られている．またvulnerableには最初 $N$ 人全員がいる． 以下の手順でゲームは進行する．   vulnerable内で $N$ 票を振り分ける．  vulnerable&amp;amp;&amp;amp;decisionsの人はdecisionsで宣言された分だけ得票する．  vulnerable={0,1,3}，decisions={0,1,1,2}の場合，0は1票，1は2票を得る．2はvulnerableに含まれないので得票しない．  上で $k$ 票消費されたとする．余った $N-k$ 票は得票数の最小値が大きくなるよう，均等に振り分ける．  5人の得票数が{1,0,3,2,1}で残り5票ある場合，以下のように分ける． {1,0,3,2,1}→{1,1,3,2,1}(1票消費)→{2,2,3,2,2}(4票消費)→{3,2,3,2,2}(5票消費) ただし5票目に選ばれる人物は2票得ている者の中からランダム   票数の最も大きい者のみがvulnerableに残る． vulnerableが1人になるまで投票を繰り返す．最後に残った1人が敗者となる．  各人が敗者となる確率を $p[i]$ としたときの $\max p$を計算する．なお，ゲームが終わらない場合には0を返す．
方針 「ゲームが終わらない」というのは，ゲーム中のある時点でvulnerableのサイズが不変，つまりvulnerable内の得票数が全て等しくなるということである．この判定法は投票の回数で異なる．
 投票1回目  vulnerableには $N$ 人全員がいるので，decisionsに複数現れる人物がいない場合，全員の得票数は1となってループ.  投票2回目以降  decisionsに係る投票を終えた時点で，vulnerable内の得票数は等しい（そういう風に投票1回目で分けます）．残りの票を振り分けたときに同票であるとループする．vulnerableのサイズを $i$ とするとループの条件は、$N\equiv 0\pmod i$   ループの条件がわかったのでシミュレーションができる．敗者は1回目の投票後にvulnerableにいる人のいずれかであり，彼らに区別はない．よって確率は、$1/i$
 </description>
    </item>
    
    <item>
      <title>SRM500 Div2Easy SRMCards</title>
      <link>https://chiyosbigdragon.github.io/blog/2018/07/18/</link>
      <pubDate>Wed, 18 Jul 2018 12:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2018/07/18/</guid>
      <description> URL http://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=11341
概略 数列が空になるまで以下の操作を繰り返す．
 数列から1つ数字を選びこれを消す． 上で選んだ数字を $n$とするとき，数列に $n\pm 1$ が存在すればこれ(ら)も同時に消す．  取り得る操作回数のうち最大を求める．
方針 ソートして小さい順に選択すると最大．証明は苦しいが，3個同時に消せる場面では必ず2-1と2回に分けて消せることに注意する．
 </description>
    </item>
    
  </channel>
</rss>