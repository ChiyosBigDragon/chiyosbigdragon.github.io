<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary-Search on Spielsand</title>
    <link>https://chiyosbigdragon.github.io/tags/binary-search/</link>
    <description>Recent content in Binary-Search on Spielsand</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    <lastBuildDate>Wed, 21 Aug 2019 12:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://chiyosbigdragon.github.io/tags/binary-search/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SRM681 Div1Easy FleetFunding</title>
      <link>https://chiyosbigdragon.github.io/blog/2019/08/21/</link>
      <pubDate>Wed, 21 Aug 2019 12:00:00 +0900</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/blog/2019/08/21/</guid>
      <description> URL https://community.topcoder.com/stat?c=problem_statement&amp;amp;pm=14104
概略 宇宙船1隻を作るには，$m$ 種類のパーツが1つずつ必要である．また，店が $n$ 個ある．店 $i$ は種類 $[a[i], b[i]]$ のパーツを合計 $k[i]$ 個まで売ってくれる．
宇宙船は最大何隻作れるか．
方針 $x$ 隻作れるかを二分探索します．判定にはパーツの種類を時間軸に持った，区間スケジューリング的な考え方を用います．パーツの種類を昇順に見ていき，現時点で購入可能な店について $b[i]$（区間の上限）の昇順に合計 $x$ 個購入します．途中で購入可能な店が無くなった場合，失敗です．このような操作は優先度付きキューを2本持つことで簡単に実現できます．
パーツの総数は $\sum k \leq nk _ {\max}$ なので操作回数は大体 $m \log \dfrac{n}{m}k _ {\max}$ で，これはおよそ $10^6$ です．
[展開する]   </description>
    </item>
    
  </channel>
</rss>