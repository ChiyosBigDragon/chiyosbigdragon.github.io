<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Competitiveprogramming on Spielsand</title>
    <link>https://chiyosbigdragon.github.io/competitiveprogramming/</link>
    <description>Recent content in Competitiveprogramming on Spielsand</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    
	<atom:link href="https://chiyosbigdragon.github.io/competitiveprogramming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Combination</title>
      <link>https://chiyosbigdragon.github.io/competitiveprogramming/library/math/combination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/competitiveprogramming/library/math/combination/</guid>
      <description>概略 Combinationに係る諸計算のライブラリ
目次  アルゴリズム  逆元 パスカルの三角形  実装例  逆元 パスカルの三角形  verify  AOJ 1501 yukicoder 117 ABC021_D  参考  アルゴリズム 逆元 $$ {}_{n} \mathrm{C} _ {r} = \frac{n!}{r!(n-r)!} $$ なので分数のmodを求めたい気持ちになる．ここで逆元を使う．
整数 $a$ と 素数 $p$ について $$ p = \left\lfloor \frac{p}{a} \right\rfloor \times a + p\%a $$ mod $p$ とすると $$ 0 \equiv \left\lfloor \frac{p}{a} \right\rfloor \times a + p\%a $$ $$ p\%a \equiv - \left\lfloor \frac{p}{a} \right\rfloor \times a $$ $$ p\%a \times a^{-1} \equiv - \left\lfloor \frac{p}{a} \right\rfloor $$ $$ a^{-1} \equiv - \left\lfloor \frac{p}{a} \right\rfloor \times (p\%a)^{-1} $$</description>
    </item>
    
    <item>
      <title>LCA (Lowest Common Ancestor)</title>
      <link>https://chiyosbigdragon.github.io/competitiveprogramming/library/graph_theory/lca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/competitiveprogramming/library/graph_theory/lca/</guid>
      <description>概略 根付き木における2頂点の共通祖先のうち，最も深いものを示す．
目次  アルゴリズム  Euler Tour RMQ (Range Minimum Query)  実装例 verify  AOJ GRL_5_C ABC014_D  参考  アルゴリズム Euler Tourで木に対する情報を拾った後，RMQでLCAを求める．
例として下図の木にアルゴリズムを用いる．
Euler Tour 木をDFSする．欲しい情報は以下の通り．
 nodeOrder[i]: $i$ 番目に訪問した頂点番号 depthOrder[i]: $i$ 番目に訪問した頂点の深さ（根を0とする） nodeFirstID[v]: 頂点 $v$ が最初に現れるタイミング     $i$ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14     nodeOrder[i] 0 1 4 1 5 6 5 7 5 1 0 2 0 3 0   depthOrder[i] 0 1 2 1 2 3 2 3 2 1 0 1 0 1 0       $v$ 0 1 2 3 4 5 6 7     nodeFirstID[v] 0 1 11 13 2 4 5 7    nodeOrderのサイズは必ず頂点数*2-1になる．これは各辺を2回通ることに由来する．</description>
    </item>
    
    <item>
      <title>Library</title>
      <link>https://chiyosbigdragon.github.io/competitiveprogramming/library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/competitiveprogramming/library/</guid>
      <description> Graph Theory  Lowest Common Ancestor (LCA)  Math  Combination  </description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://chiyosbigdragon.github.io/competitiveprogramming/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chiyosbigdragon.github.io/competitiveprogramming/tools/</guid>
      <description> コンテスト  AtCoder Codeforces TopCoder yukicoder LeetCode CS Academy  スケジュール  competitiveprogramming.info Contest List  ジャッジ  AIZU ONLINE JUDGE Project Euler  問題埋め  AtCoder Problems AtCoder Problems 4 Me AtCoder Scores AOJ-ICPC AOJ/AtCoder-JOI 修行  データ  AtCoder Performances AtCoder Stats AtCoderで解いた問題の点数の二乗和の移動平均をグラフにするやつ Rating History  バーチャル  AtCoder Virtual Contest  求人  AtCoderJobs  </description>
    </item>
    
  </channel>
</rss>